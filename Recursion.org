
* Types

Let

1. %F = Λα. ~(F ~α)
2. μF = ∀α. !(Fα ⊸ α) ⊸ α
3. νF = ∃α. !(α ⊸ Fα) ⊗ α
4. ψF = F (ψF)

We have:

1. % in involutive
2. ψ is self dual
3. μ and ν are dual

1. %%F = F
2. ~(ψF) = ψ%F
3. ~(μF) ≅ ν%F
4. ~(νF) ≅ μ%F


Proofs

1  Easy consequence of ~~A = A

2  lemma: ~(ΨF) = ~(F (ΨF)) = ~F (~~(ΨF)) = %F (~ψF)

We get the result by co-induction

3
   ~(∀α. !(Fα ⊸ α) ⊸ α)
by def
   ≅ ∃α. !(Fα ⊸ α) ⊗ ~α
by change of variable
   ≅ ∃α. !(F~α ⊸ ~α) ⊗ α
   ≅ ∃α. !(α ⊸ ~F~α) ⊗ α
   ≅ ∃α. !(α ⊸ %Fa) ⊗ α
   ≅ ν %F

4 Consequence of 3 and 1.



* Static combinators:

nuWalk : ψ F ⊸ ν F -- co-algebra which destroys the fixpoint (removing the constructor of ψ)
muAlloc : μ F ⊸ ψ F -- generate a fixpoint by running the algebra on constructor of ψ

In classical logic, the above two types are equivalent:

ψ F ⊸ μ F ≅ ~(μ F) ⊸ ~(ψ F)
           ≅ ν %F ⊸ ψ %F

These can be implemented by instanciation of the polymorphic
parameter to Ψ.

- we have ~ψF, ∀α. !(Fα ⊸ α) ⊸ α
- instanciate:
- we have ~ψF, !(ψF ⊸ F(ψF)) ⊸ ψF
- par rule
- ~ψF, ψF ;  ~!(ψF ⊸ F(ψF))
- ax
- ~!(ψF ⊸ F(ψF))
- this one can be 'run' by regular eval.


* Looping combinator(s)
muWalk  : ψ F ⊸ μ F -- walk the fixpoint, applying the algebra supplied by μ F
nuAlloc : ν F ⊸ ψ F -- run the co-algebra, constructing the fixpoint as we go.

The above two can be obtained by combination of either the static combinator with

loop : ν F ⊸ μ F

This needs either to be a constant or be provided special support
somehow.


* General Fixpoint?


fix : (A ⊸ A) → (A ⊸ A)

   A, ~A ⊢
------------ fix
   A, ~A ⊢


cut-elim:

on the input, recurse:

   x:A ⊢ f(x):A
---------------------- fix
   x:A ⊢ fix f x : A               Γ ⊢ a:A
----------------------------------------------- cut
              Γ ⊢ fix f a : A



      ...
  ------------------
   Γ ⊢ fix f a : A                     x:A ⊢ f(x):A
 ----------------------------------------------------- cut
     Γ ⊢ f (fix f a) : A


on the output?

commuting conv?
