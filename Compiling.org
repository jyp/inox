* In CLL, continuations = closures

This is simply because there is a single function type (~A)
isomorphic to A ⊸ ⊥.

* Auto-Currying

Consider a (linear) function

f : A ⊸ B ⊸ C

Its type is encoded as:

(~A ⅋ (~B ⅋ C))

Which reduces as follows:

  (~A ⅋ (~B ⅋ C)) 
= ~(~~A ⊗ ~(~B ⅋ C))
= ~(A ⊗ ~(~B ⅋ C))
= ~(A ⊗ ~~(~~B ⊗ ~C))
= ~(A ⊗ (B ⊗ ~C))

When calling such a function, with x and y, arguments of type A and B,
one will call the code for f with a structure consisting of x, y and a
continuation. We are not creating any intermediate closure of type B ⊸
C.

Thus by doing the encoding steps ILL -> CLL -> focused CLL one
optimises calls of curried functions.


* Structure of closures

The structure of a closure of type ~B is a pair of
- a pointer to code, expecting B ⊗ A as argument
- an environment of type A


Note that, when compiling first-order code (e.g. A Pascal-like or
C-like language), functions will have a single negative argument for
the result, like so:

f : Param ⊸ (Result ⊸ ⊥) ⊸ ⊥

Let us examine a call to f:


x <- something
res <- f(x)
y <- doSomething(x,res)
return y

What happens is that we pass to f a closure ('continuation') which
will run doSomething and return its result. It will have x in its
environment *as well as* the continuation to call in order to return
the final result. In fact, still in the first-order situation, each
closure will have a single closure in its environment. Thus, we
recover the stack structure. It would then be beneficial, when
allocating a closure, to identify the 'inner closure' and simply stick
the new closure in front.

In this case the 'call stack' has the familiar structure:

- return address
- local vars
- return address
- local vars
- return address
- local vars

etc.

* List

* Types of closures

Note that the type of the environment is fully determined by the
pointer to the code. This allows performing type-aware manipulation of
closures without storing any further data.

* Exponentials

- A major interest of using LL is to eschew garbage collection.
- We can fortunately handle exponentials using reference count
- Represent an exponential by a pointer to a pair of a refcount + data
- Boxing is implemented by moving the relevant data to the heap (setting refcount to 1)
- Unboxing:
  - access data from the heap (directly)
  - THEN decrementing the refcount
- When the refcount becomes 0, we have to follow the contents of the
  data and decrement refcounts recursively.

* Polymorphism

- As far as possible I'd like to avoid useless boxing of data
- (If boxing is desirable for whatever reason we can always use
  exponentials, or a special operator (§))
- This means that polymorphic values should be copied (and boxed) around as other
  (primitive) types
- Thus types will have a runtime representation, allowing for the copy
  and (boxing) to be performed correctly.
- One needs to be able to pass around (and store) values whose size is dynamic

* Representation of types

- Variable-length types:
  vl : Type -> Bool

  vl(!A) = False
  vl(∃α. A) = True
  vl(A ⊸ ⊥) = True
  vl(A ⊗ B) = vl(A) or vl(B)
  vl(A ⊕ B) = vl(A) or vl(B) or len(A) /= len(B)
  vl(1) = False
  vl(0) = False

- representation re : Type -> Layout
  re(!A) = reference counted pointer to re(A)
  re(∃α. A) = TypeRep (α) <> re(A)
  re(A ⊸ ⊥) = pointer to code <> re(Env)
  re(A ⊗ B) = pointer to re(A) <> re(B) if vl(A)
  re(A ⊗ B) = re(A) <> re(B) otherwise
  re(A ⊕ B) = tag <> max(re(A), re(B))


* Example: List-array

LA α = α ⊕ 


* LLVM

- musttail call
- variable length arguments can be passed with the inalloca attribute (check also doc of musttail)
  http://llvm.org/docs/InAlloca.html
- Prefix Data enable storage of closure runtime type info easily and efficiently
